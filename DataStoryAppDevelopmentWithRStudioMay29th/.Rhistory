Math$subject <- "Math"
MotherTougue <- read.csv("PSLE/MotherTougue.csv")
colnames(MotherTougue) <- c("year","race","percentage")
MotherTougue$subject <- "MotherTougue"
Science <- read.csv("PSLE/Science.csv")
colnames(Science) <- c("year","race","percentage")
Science$subject <- "Science"
PSLE <- do.call("rbind", list(English, Math, MotherTougue,Science))
Math=read.csv("Session 2/PSLE/Math.csv")
English <- read.csv("Session 2/PSLE/English.csv")
English$subject <- "English"
colnames(English) <- c("year","race","percentage","subject")
Math=read.csv("Session 2/PSLE/Math.csv")
colnames(Math) <- c("year","race","percentage")
Math$subject <- "Math"
MotherTougue <- read.csv("Session 2/PSLE/MotherTougue.csv")
colnames(MotherTougue) <- c("year","race","percentage")
MotherTougue$subject <- "MotherTougue"
Science <- read.csv("Session 2/PSLE/Science.csv")
colnames(Science) <- c("year","race","percentage")
Science$subject <- "Science"
PSLE <- do.call("rbind", list(English, Math, MotherTougue,Science))
View(PSLE)
PSLE<-remove(PSLE$race=='race')
PSLE<-remove(PSLE$race=='race',)
?remove
PSLE<-remove(PSLE$race=='Overall')
PSLE<-PSLE[,PSLE$race!='Overall']
PSLE<-PSLE[PSLE$race!='Overall',]
PSLE %>% group_by(year)
PSLE %>% group_by(year)
as.factor(PSLE$year)
as.factor(PSLE$year).count()
table(as.factor(PSLE$year).count)
as.factor(PSLE$year)
nrow(companies)
nrow(as.factor(PSLE$year))
ncol(as.factor(PSLE$year))
as.factor(PSLE$year)
unique(PSLE$year)
length(unique(PSLE$year))
ans <- PSLE[PSLE$race=='Malay' & PSLE$percentage>95,]
ans
PSLE[PSLE$race=='Malay' & PSLE$percentage>95,]
PSLE %>% group_by(year) %% summarise(best.Race==race & percentage==max(Percentage))
PSLE %>% group_by(year) %% summarise(best.Race=race & percentage==max(Percentage))
PSLE %>% group_by(year) %% summarise(best.Percentage= max(percentage))
install.packages(tidyr)
install.packages("tidyr")
library(tidyr)
PSLE.log <- PSLE %>% spread(year,percentage)
View(PSLE)
View(PSLE.log)
install.packages("XML")
library("XML")
dta <- xmlParse("Session 3/books.xml")
dta
root <- xmlRoot(dta)
root
root <- xmlRoot(root)
root
nodes <- xmlChildren(root)
nodes
nodes[1]
nodes[2]
nodes[[2]]
books <- xmlChildren(nodes[[2]])
class(books)
books <- getNodeSet("/library/catalog/book")
books <- getNodeSet("/Library/catalog/book")
books <- getNodeSet("/Library/catalog/book)
books <- getNodeSet(/Library/catalog/book)
books <- getNodeSet(data,"/Library/catalog/book)
""
books <- getNodeSet(data,"/Library/catalog/book")
books <- getNodeSet(dta,"/Library/catalog/book")
books <- xmlToDataFrame(books)
View(books)
books <- getNodeSet(data,"/library/catalog/book")
books <- getNodeSet(dta,"/library/catalog/book")
data <- xmlParse("books.xml")
data
root <- xmlRoot(data)
root
nodes <- xmlChildren(root)
nodes[1]
nodes[2]
nodes[[2]]
books <- xmlChildren(nodes[[2]])
class(books)
books[[1]]
books[[2]]
books <- getNodeSet(data,"/library/catalog/book")
books
books <- getNodeSet(data,"/library/catalog/book[@type='SoftCover']")
books
books <- xmlToDataFrame(books)
View(books)
url <- "https://api.data.gov.sg/v1/transport/carpark-availability
"
url <- "https://api.data.gov.sg/v1/transport/carpark-availability"
install.packages("jsonlite")
library(jsonlite)
data <- fromJSON(url)
url <- "https://api.data.gov.sg/v1/transport/carpark-availability"
data <- fromJSON(url)
install.packages(url)
library(curl)
data <- fromJSON(url)
url <- "https://api.data.gov.sg/v1/transport/carpark-availability"
data <- fromJSON(url)
install.packages('curl')
library(curl)
data <- fromJSON(url)
carpark <- as.data.frame(data$items$carpark_data)
view(carpark)
View(carpark)
theurl <- "http://apps.saferoutesinfo.org/legislation_funding/state_apportionment.cfm"
#Read the whole page into our local computers
url <- curl(theurl)
urldata<-readLines(url)
#use readHTMLTable function to extract the table out
data <- readHTMLTable(urldata,  stringsAsFactors = FALSE)
sss
steam_raw<-read.csv('steamspy_data.csv',stringsAsFactors = FALSE)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
?rm
res=rm(steam_raw$score_rank)
res=rm(score_rank)
ls()
res=rm("score_rank")
steam_raw$score_rank<-null
steam_raw$score_rank<-NULL
steam_raw$userscore<-NULL
steam_raw$tags<-NULL
View(steam_raw)
steam_sub<-steam_raw
steam_raw<-read.csv('steamspy_data.csv',stringsAsFactors = FALSE)
steam_sub <- steam_raw%>%select(-c("score_rank","userscore","tags"))
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_raw<-read.csv('steamspy_data.csv',stringsAsFactors = FALSE)
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
library(dlypr)
library(dplyr)
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_sub[steam_sub==""] <-NA
steam <- na.omit(steam_sub)
colSums(is.na(steam))
View(steam)
steam <- na.omit(steam_sub$ccu)
View(steam)
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_sub[steam_sub==""] <-NA
colSums(is.na(steam_sub))
steam <- na.omit(steam_sub$publisher)
colSums(is.na(steam))
steam <- na.omit(steam_sub$publisher)
View(steam)
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_sub[steam_sub==""] <-NA
colSums(is.na(steam_sub))
steam<- steam_sub[-which(is.na(steam_sub$publisher))]
colSums(is.na(steam))
steam <- steam_sub %>% drop_na(publisher)
library(tidyr)
steam <- steam_sub %>% drop_na(publisher)
colSums(is.na(steam))
View(steam)
res <- steam %>% group_by(publisher)
res
res <- steam %>% group_by(publisher) %>% summarise(No.games=n())
res
res <- steam %>% group_by(publisher) %>% summarise(No.games=n()) %>% arrange(-No.games) %>% top_n(3) %>% select(publisher)
res
steam %>% group_by(publisher) %>% summarise(No.games=n()) %>% arrange(-No.games) %>% top_n(3) %>% select(publisher)
steam %>% group_by(publisher) %>% filter(-publisher=="Valve")
steam %>% group_by(publisher) %>% filter(publisher!="Valve")
nrow(steam)
steam %>% filter(publisher!='Valve')
nrows(steam[steam$publisher!="Valve",])
class(steam[steam$publisher!="Valve",])
res <- steam[steam$publisher!="Valve",]
nrow(steam[steam$publisher!="Valve",])
nrow(steam)
nrow(steam)/nrow(steam)
nrow(steam[steam$publisher!="Valve",])/nrow(steam)
steam %>% filter(discount>0) %>% group_by(publisher) %>% summarise(No.games=n()) %>% arrange(-No.games) %>% top_n(3) %>% select(publisher)
steam %>%  mutate(ratio=Positive/(Positive+Negative))
view(steam)
View(stem)
View(steam)
res <- steam %>% mutate(ratio = positive/(positive+negative))
res
res <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
View(steam_clean)
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean
steam_clean$rating <-ifelse((steam_clean$positive==0) and (steam_clean$negative==0),"No Review")
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean$rating <-if((steam_clean$positive==0) and (steam_clean$negative==0),"No Review")
steam_clean$rating <-if((steam_clean$positive==0) & (steam_clean$negative==0),"No Review")
steam_clean$rating <-ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No Review")
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No review"),"positive") )
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No review","positive") )
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No review","positive") )
;
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No review","positive")) )
steam_clean$rating
steam_clean[steam_clean$rating=='No review',]
steam_clean[steam_clean$rating=='No review',]
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse((steam_clean$positive==0) & (steam_clean$negative==0),"No review","positive")) )
colSums( steam_clean)
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean %>% group_by("rating") %>% mutate(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
View(steam_clean)
steam_clean %>% group_by(rating) %>% mutate(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean %>% group_by(rating)
res <-steam_clean %>% group_by(rating)
nrow(res)
steam_clean %>% group_by(rating)
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
View(steam_clean)
steam_clean %>% group_by(rating)
steam_clean %>% group_by(genre)
steam_clean %>% group_by(rating) %>% summarise(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
steam_clean %>% group_by(rating) %>% summarise(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive"))
steam_clean %>% group_by(rating) %>% summarise(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean$owners <-gsub('[,]', '', steam_clean$owners)
steam_clean
View(steam_clean)
steam_clean$owners <-gsub('[,]', '', steam_clean$owners)
steam_clean$owners_lower <-strsplit(steam_clean$oweners,'..')[[1]]
steam_clean$owners_lower <-strsplit(steam_clean$oweners,' .. ')[[1]]
steam_clean$owners_lower <-strsplit(steam_clean$oweners,'.')[[1]]
strsplit("100..200",'.')[[1]]
strsplit("100..200",'.')[1]
strsplit("100..200",'.')
strsplit("100..200",'.')
strsplit("100..200",'..')
strsplit('100..200','..')
name <-strsplit("std_target_201907.csv" ,".")
name
steam_clean$owners_lower <-strsplit(steam_clean$oweners,split="..")
strsplit("100..200","..")
strsplit("100..200",split="..")
str_split("100..200",split="..")
library(dplyr)
library(stringr)
library(tidyr)
str_split("100..200",split="..")
test <- "aa bb cc dd ee ff"
a <- strsplit(test,split = " ")
a
steam_clean$owners <-gsub('[..]', ';', steam_clean$owners)
steam_clean$owners <-gsub('[..]', ' ', steam_clean$owners)
steam_clean$owners <-gsub('[;;]', ' ', steam_clean$owners)
steam_clean$owners_lower <-strsplit(steam_clean$oweners,'  ')
steam_clean$owners_lower <-strsplit(steam_clean$oweners,split='  ')
steam_clean$owners_lower <-strsplit(steam_clean$oweners,split=' ')
steam_clean$owners_lower <-strsplit(character(steam_clean$oweners),split=' ')
as.character(steam_clean$owners)
steam_clean$owners_lower <-strsplit(character(steam_clean$oweners),split=' ')
steam_clean$owners_lower <-strsplit(steam_clean$oweners,split=' ')
steam_clean$owners <-gsub('[  ]', ';', steam_clean$owners)
steam_clean$owners <-gsub('[;]', '.', steam_clean$owners)
steam_clean$owners_lower <-strsplit(steam_clean$oweners,split=".")
steam_clean$owners_lower <-strsplit(steam_clean$oweners[[0]],split=".")
steam_clean$oweners[[0]]
steam_clean$oweners[0]
steam_clean$oweners
steam_clean$owners_lower <-strsplit(steam_clean$owners[[0]],split=".")
steam_clean$owners_lower <-strsplit(steam_clean$owners,split=".")
steam_clean$owners_lower <-strsplit(steam_clean$owners,split=".")[[0]]
steam_clean$owners_lower <-strsplit(steam_clean$owners,split=".")[0]
steam_clean$owners_lower <-strsplit(steam_clean$owners,split=".")[1]
steam_clean$owners_lower <- NULL
strsplit("10000000....20000000
",split=".")
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive") )
View(steam_clean)
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
strsplit(steam_clean$oweners,split=';')
as.character(steam_clean$owners)
strsplit(steam_clean$oweners,split=';')
strsplit(steam_clean$owners,split=';')
strsplit(steam_clean$owners,split=';')[1]
strsplit(steam_clean$owners,split=';')[[1]]
strsplit(steam_clean$owners,split=';')
strsplit("10,000,000 ;; 20,000,000",split=';')
strsplit("10,000,000 ;; 20,000,000",split=';')[1]
strsplit("10,000,000 ;; 20,000,000",split=';')[[1]]
strsplit("10,000,000 ;; 20,000,000",split=';')[[1,1]]
class(strsplit("10,000,000 ;; 20,000,000",split=';')[[1]])
class(unlist(strsplit("10,000,000 ;; 20,000,000",split=';')[[1]]))
unlist(strsplit("10,000,000 ;; 20,000,000",split=';')[[1]])
list(strsplit("10,000,000 ;; 20,000,000",split=';')[[1]])[0]
list(strsplit("10,000,000 ;; 20,000,000",split=';')[[1]])[1]
View(steam_raw)
View(steam_raw)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
library(dplyr)
library(tidyr)
library(dplyr)
library(tidyr)
steam_raw<-read.csv('steamspy_data.csv',stringsAsFactors = FALSE)
steam_sub <- steam_raw %>% select(-c("score_rank","userscore","tags"))
steam_sub[steam_sub==""] <-NA
steam <- steam_sub %>% drop_na(publisher)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$rating <- ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed",ifelse(steam_clean$positive==0 & steam_clean$negative==0,"No Review","positive") ))
steam_clean %>% group_by(rating) %>% summarise(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean$rating <- ifelse(steam_clean$positive==0 & steam_clean$negative==0,"No Review",ifelse(steam_clean$ratio<=0.4,"negative",ifelse((steam_clean$ratio>0.4)&(steam_clean$ratio<0.7),"mixed","positive")))
steam_clean %>% group_by(rating) %>% summarise(Maximum.price=max(price),Minimum.price=min(price),Average.price=mean(price))
steam_clean$owners
steam_clean$owners <-gsub('[.]', ',', steam_clean$owners)
View(steam_sub)
View(steam_clean)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
View(steam_clean)
View(steam_clean)
as.character(steam_clean$owners)
strsplit("50,000 .. 100,000",split=".")
strsplit("50,000;100,000",split=";")
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
as.character(steam_clean$owners)
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
as.character(steam_clean$owners)
strsplit(steam_clean$owners[1],split=".")
steam_clean$owners[1]
steam_clean$owners[[1]]
strsplit(steam_clean$owners[[1]],split=".")
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
strsplit(steam_clean$owners[[1]],split=";")
data1 <- separate(steam_clean,owners, into= c("owners.lower","owners.higher"),sep= ";")
data1
View(data1)
data1 <- separate(steam_clean,owners, into= c("owners.lower","discard","discard","owners.higher"),sep= ";")
data1 <- separate(steam_clean,owners, into= c("owners.lower","discard1","discard2","owners.higher"),sep= ";")
data1$discard1<-NULL
data1$discard2<-NULL
data1$discard2<-NULL
data1 <- separate(steam_clean,owners, into= c("owners.lower","discard1","discard2","owners.higher"),sep= ";")
data1 <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher",,"discard2"),sep= ";")
data1 <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
data1$discard1<-NULL
data1$discard2<-NULL
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
as.integer(steam_clean$owners.lower)
gsub('[,]',"",steam_clean$owners.higher)
View(steam_clean)
View(steam_clean)
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
as.integer(steam_clean$owners.lower)
steam_clean$owners.lower <- as.integer(steam_clean$owners.lower)
steam_clean$owners.higher <- as.integer(steam_clean$owners.higher)
steam_clean$owners.higher <- as.integer(steam_clean$owners.higher)
steam_clean$owners.lower <- as.numeric(steam_clean$owners.lower)
steam_clean$owners.higher <- as.numeric(steam_clean$owners.higher)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n())
res <- steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n())
View(res)
View(res)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500)
steam_clean$revenue <-(steam_clean$owners.lower+steam_clean$owners.higher)/2
View(steam_clean)
View(steam_clean)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean$owners.lower <- as.numeric(steam_clean$owners.lower)
steam_clean$owners.higher <- as.numeric(steam_clean$owners.higher)
View(steam_clean)
View(steam_clean)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean$owners.lower <- as.numeric(steam_clean$owners.lower)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean$owners.lower <- as.integer(steam_clean$owners.lower)
steam_clean$owners.lower <- as.numeric(steam_clean$owners.lower)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean$owners.lower <- as.double(steam_clean$owners.lower)
steam_clean$owners.higher <- as.double(steam_clean$owners.higher)
steam_clean$revenue <-(steam_clean$owners.lower+steam_clean$owners.higher)/2
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
class(steam_clean$owners.higher)
as.numeric(as.character(steam_clean$owners.higher))
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n())
res<-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre>500)
View(res)
View(res)
res<-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/n()) %>% filter(No.games.bygenre>500) %>% select(genre)
steam_clean$revenue <-(steam_clean$owners.lower+steam_clean$owners.higher)/2
steam_clean <- steam %>% mutate(ratio = positive/(positive+negative))
steam_clean$owners <-gsub('[.]', ';', steam_clean$owners)
steam_clean$owners <- as.character(steam_clean$owners)
steam_clean <- separate(steam_clean,owners, into= c("owners.lower","discard1","owners.higher","discard2"),sep= ";")
steam_clean$discard1<-NULL
steam_clean$discard2<-NULL
steam_clean$owners.higher <- gsub('[,]',"",steam_clean$owners.higher)
steam_clean$owners.lower <- gsub('[,]',"",steam_clean$owners.lower)
steam_clean$owners.lower <- as.double(steam_clean$owners.lower)
steam_clean$owners.higher <- as.double(steam_clean$owners.higher)
steam_clean$revenue <-(steam_clean$owners.lower+steam_clean$owners.higher)/2
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/n()) %>% filter(No.games.bygenre>500) %>% select(genre)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/n()) %>% filter(No.games.bygenre>500)
View(set1)
View(set1)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% filter(No.games.bygenre>500)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% arrange(-revenue) %>%filter(No.games.bygenre>500)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% arrange(-revenue) %>%filter(No.games.bygenre>500) %>% top_n(5)
set1
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% arrange(-revenue) %>%filter(No.games.bygenre>500) %>% top_n(5) %>% select(genre)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% arrange(-revenue) %>%filter(No.games.bygenre>500) %>% top_n(5) %>% select(genre)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% arrange(-revenue) %>%filter(No.games.bygenre>500)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean))  %>%filter(No.games.bygenre>500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5) %>% select(genre)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean))  %>%filter(No.games.bygenre>500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5)
View(data1)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean))  %>%filter(No.games.bygenre>500) %>% arrange(-Avg.revenue.bygame) %>% select(genre) %>% top_n(5)
res <- steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n(),Avg.revenue.bygame=sum(revenue)/nrow(steam_clean))  %>%filter(No.games.bygenre>500) %>% arrange(-Avg.revenue.bygame) %>% select(genre) %>% top_n(5)
View(res)
View(res)
steam_clean %>% mutate(Avg.revenue.bygame=sum(revenue)/n()) %>% group_by(genre) %>% mutate(No.games.bygenre=n()) select(genre,Avg.revenue.bygame) %>% top_n(5)
steam_clean %>% mutate(Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)) %>% group_by(genre) %>% mutate(No.games.bygenre=n()) select(genre,Avg.revenue.bygame) %>% top_n(5)
steam_clean$Avg.revenue.bygame=sum(revenue)/nrow(steam_clean)
steam_clean$Avg.revenue.bygame=sum(steam_clean$revenue)/nrow(steam_clean)
steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% select(genre,Avg.revenue.bygame) %>% top_n(5)
class(steam_clean$languages[[0]])
class(steam_clean$languages[0])
library(tidyverse)
install.packages(tidyverse)
install.packages("tidyverse")
library(tidyverse)
grepl("*华中一区一部*",c("华中一区销售一部","华中一区一部一组"))
grepl("*English部*",steam_clean$languages)
grepl("*English*",steam_clean$languages)
res<-grepl("*English*",steam_clean$languages)
res<-grepl("*Japanese*",steam_clean$languages)
res<-grepl("*Simplified Chinese*",steam_clean$languages)
res1<-grepl("*English*",steam_clean$languages)
res2<-grepl("*Japanese*",steam_clean$languages)
ans <- res+res1+res2
ans
ans
ans[ans>=2]
length(ans[ans>=2])
length(ans)
steam_clean$Avg.revenue.bygame=sum(steam_clean$revenue)/nrow(steam_clean)
View(steam_clean)
View(steam_clean)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500)
revenueSet <- steam_clean %>% arrange(-Avg.revenue.bygame) %>% top_n(5)
revenueSet
View(revenueSet)
View(revenueSet)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500)
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5) %>% select(genre)
set1
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5) %>% select(genre) %>% group_by(genre)
set1
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5) %>% select(genre) )
set1 <-steam_clean %>% group_by(genre) %>% mutate(No.games.bygenre=n()) %>% filter(No.games.bygenre > 500) %>% arrange(-Avg.revenue.bygame) %>% top_n(5) %>% select(genre)
unique(set1)
